package main

/*
#cgo CFLAGS: -x objective-c
#cgo LDFLAGS: -framework Foundation
#cgo LDFLAGS: -framework OSAKit
#import <Foundation/Foundation.h>
#import <OSAKit/OSAKit.h>
NSString* jxa() {



NSString *mycode = @"";
    NSData *decoded = [[NSData alloc] initWithBase64EncodedString:mycode options:0];
    NSString *decoded2 = [[NSString alloc] initWithData:decoded encoding:NSUTF8StringEncoding];

    OSALanguage *lang = [OSALanguage languageForName:@"JavaScript"];
    OSAScript *script = [[OSAScript alloc] initWithSource:decoded2 language:lang];
    NSDictionary *__autoreleasing compileError;
    [script compileAndReturnError:&compileError];
    NSDictionary *__autoreleasing runError;
    NSAppleEventDescriptor *res = [script executeAndReturnError:&runError];

    NSString *output = [NSString stringWithFormat:@"%@", res];
    NSLog(output);
    return output;
}
*/
import "C"
import "fmt"

func main() {
	C.jxa()
	fmt.Println("[+] Base64 encoded JXA script successfully executed from golang by way of Objective C!")
}
